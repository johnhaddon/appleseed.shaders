
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2014 The masked shader writer, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

shader as_glass_surface(
    normal                  Nn = N,
    vector                  T = dPdu,
    color					col = 1,
    string					distribution = "specular",
    float 					xroughness = 0.015,
    float 					yroughness = 0.015,
    float 					ior = 1.5,
    output closure color	BRDF = 0)
{
    float eta = ior;

    if (!backfacing())
    {
        eta = 1.0 / eta;
    }

    float Kr, Kt;
    fresnel(I, Nn, eta, Kr, Kt);

    if (distribution == "specular")
        BRDF = col * Kr * reflection(Nn) + Kt * refraction(N, eta);
    else
    {
        BRDF = col * 
            (Kr * microfacet(distribution, Nn, T, xroughness, yroughness, eta, 0) +
             Kt * microfacet(distribution, Nn, T, xroughness, yroughness, eta, 1));
    }
}


//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2014 The masked shader writer, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "appleseed/defaults.h"
#include "appleseed/metadata.h"

shader as_glass_surface
[[
    string help = "Glass surface shader"
]]
(
    vector Normal = N,
    vector Tangent = dPdu,
    float Specular = 1
    [[
        string help = "Reflectivity",
        APPLESEED_01_LIMIT_METADATA
    ]],
    color Color = 1,
    string Distribution = APPLESEED_DEFAULT_MDF_DISTRIBUTION
    [[ 
        APPLESEED_MDF_DISTRIBUTION_METADATA
    ]],

    float RoughnessX = 0.015,
    float RoughnessY = 0.015,

    float  Ior = APPLESEED_DEFAULT_IOR
    [[
        APPLESEED_IOR_METADATA
    ]],

    output closure color BRDF = 0
)
{
    float eta = Ior;

    if (!backfacing())
    {
        eta = 1.0 / eta;
    }

    float Kr, Kt;
    fresnel(I, Normal, eta, Kr, Kt);

    if (Distribution == "specular")
        BRDF = Specular * Color * Kr * reflection(Normal) + Kt * refraction(N, eta);
    else
    {
        BRDF = Specular * Color * 
            (Kr * microfacet(Distribution, Normal, Tangent, RoughnessX, RoughnessY, eta, 0) +
             Kt * microfacet(Distribution, Normal, Tangent, RoughnessX, RoughnessY, eta, 1));
    }
}
